;
; File generated by cc65 v 2.18 - Git c0a873e
;
	.fopt		compiler,"cc65 v 2.18 - Git c0a873e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_pad_new
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_1_mt
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_RoundSprL
	.export		_RoundSprR
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_hero_velocity_x
	.export		_hero_velocity_y
	.export		_old_x
	.export		_old_y
	.export		_stick
	.export		_temp_x
	.export		_temp_y
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_BoxGuy1
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_Room1
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision_sub
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_break_wall
	.export		_main

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$3000

.segment	"RODATA"

_RoundSprL:
	.byte	$FF
	.byte	$FF
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$03
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSprR:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$11
	.byte	$00
	.byte	$80
_palette_bg:
	.byte	$19
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$19
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$19
	.byte	$02
	.byte	$12
	.byte	$22
	.byte	$19
	.byte	$09
	.byte	$19
	.byte	$29
_palette_sp:
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_metatiles1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_Room1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_direction:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_hero_velocity_x:
	.res	2,$00
_hero_velocity_y:
	.res	2,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_stick:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(Room1);
;
	lda     #<(_Room1)
	ldx     #>(_Room1)
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1);
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	lda     #$00
L02AF:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	lda     #$00
L02AE:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	lda     _x
	cmp     #$E0
	beq     L02B0
;
; for(x=0; ;x+=0x20){
;
	lda     #$20
	clc
	adc     _x
	jmp     L02AE
;
; if (y == 0xe0) break;
;
L02B0:	lda     _y
	cmp     #$E0
	beq     L0172
;
; for(y=0; ;y+=0x20){
;
	lda     #$20
	clc
	adc     _y
	jmp     L02AF
;
; buffer_1_mt(NTADR_A(4,4),1); //the NTADR_A macro counts tiles, not metatiles
;
L0172:	ldx     #$20
	lda     #$84
	jsr     pushax
	lda     #$01
	jsr     _buffer_1_mt
;
; memcpy (c_map, Room1, 240);
;
	ldy     #$00
L019E:	lda     _Room1,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L019E
;
; c_map[0x22] = 1; //make that extra metatile solid
;
	lda     #$01
	sta     _c_map+34
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L02B2
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L02B2:	lda     _temp_y
	bne     L02B3
	lda     #$01
	sta     _temp_y
;
; if(direction == LEFT) {
;
L02B3:	lda     _direction
	bne     L01B0
;
; oam_meta_spr(temp_x, temp_y, RoundSprL);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_RoundSprL)
	ldx     #>(_RoundSprL)
;
; else{
;
	jmp     L02B1
;
; oam_meta_spr(temp_x, temp_y, RoundSprR);
;
L01B0:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_RoundSprR)
	ldx     #>(_RoundSprR)
L02B1:	jsr     _oam_meta_spr
;
; if(stick){
;
	lda     _stick
	beq     L01BB
;
; oam_spr(temp_x+0x0f, temp_y, 0x04, 0);
;
	jsr     decsp3
	lda     _temp_x
	clc
	adc     #$0F
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr
;
; }
;
L01BB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = BoxGuy1.x;
;
	lda     _BoxGuy1+1
	sta     _old_x+1
	lda     _BoxGuy1
	sta     _old_x
;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L02BA
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; hero_velocity_x = -SPEED;
;
	ldx     #$FE
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L02C9
L02BA:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L02BC
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; hero_velocity_x = SPEED;
;
	inx
L02C9:	lda     #$80
;
; hero_velocity_x = 0;
;
L02BC:	sta     _hero_velocity_x
	stx     _hero_velocity_x+1
;
; BoxGuy1.x += hero_velocity_x;
;
	lda     _hero_velocity_x
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
	lda     _hero_velocity_x+1
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; if(BoxGuy1.x > 0xf100) { // too far, don't wrap around
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F1
	bcc     L02BF
;
; if(old_x >= 0x8000){
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L02BE
;
; BoxGuy1.x = 0xf100; // max right
;
	ldx     #$F1
;
; BoxGuy1.x = 0x0000; // max left
;
L02BE:	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; Generic.x = BoxGuy1.x >> 8; // the collision routine needs an 8 bit value
;
L02BF:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if(hero_velocity_x < 0){ // going left
;
	ldx     _hero_velocity_x+1
	cpx     #$80
	bcc     L01E9
;
; if(bg_coll_L() ){ // check collision left
;
	jsr     _bg_coll_L
	tax
	beq     L01F5
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_L
;
; else if(hero_velocity_x > 0){ // going right
;
	jmp     L02CA
L01E9:	lda     _hero_velocity_x
	cmp     #$01
	lda     _hero_velocity_x+1
	sbc     #$00
	bvs     L01F4
	eor     #$80
L01F4:	bpl     L01F5
;
; if(bg_coll_R() ){ // check collision right
;
	jsr     _bg_coll_R
	tax
	beq     L01F5
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_R
L02CA:	sta     _BoxGuy1+1
;
; old_y = BoxGuy1.y;
;
L01F5:	lda     _BoxGuy1+2+1
	sta     _old_y+1
	lda     _BoxGuy1+2
	sta     _old_y
;
; if(pad1 & PAD_UP){
;
	lda     _pad1
	and     #$08
	beq     L02C0
;
; hero_velocity_y = -SPEED;
;
	ldx     #$FE
;
; else if (pad1 & PAD_DOWN){
;
	jmp     L02CB
L02C0:	lda     _pad1
	ldx     #$00
	and     #$04
	beq     L02C2
;
; hero_velocity_y = SPEED;
;
	inx
L02CB:	lda     #$80
;
; hero_velocity_y = 0;
;
L02C2:	sta     _hero_velocity_y
	stx     _hero_velocity_y+1
;
; BoxGuy1.y += hero_velocity_y;
;
	lda     _hero_velocity_y
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     _hero_velocity_y+1
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; if(BoxGuy1.y > 0xe000) { // too far, don't wrap around
;
	lda     _BoxGuy1+2
	cmp     #$01
	lda     _BoxGuy1+2+1
	sbc     #$E0
	bcc     L02C5
;
; if(old_y >= 0x8000){
;
	lda     _old_y
	cmp     #$00
	lda     _old_y+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L02C4
;
; BoxGuy1.y = 0xe000; // max down
;
	ldx     #$E0
;
; BoxGuy1.y = 0x0000; // max up
;
L02C4:	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; Generic.x = BoxGuy1.x >> 8; // the collision routine needs an 8 bit value
;
L02C5:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if(hero_velocity_y < 0){ // going up
;
	ldx     _hero_velocity_y+1
	cpx     #$80
	bcc     L0218
;
; if(bg_coll_U() ){ // check collision left
;
	jsr     _bg_coll_U
	tax
	beq     L0224
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_U
;
; else if(hero_velocity_y > 0){ // going down
;
	jmp     L02CC
L0218:	lda     _hero_velocity_y
	cmp     #$01
	lda     _hero_velocity_y+1
	sbc     #$00
	bvs     L0223
	eor     #$80
L0223:	bpl     L0224
;
; if(bg_coll_D() ){ // check collision right
;
	jsr     _bg_coll_D
	tax
	beq     L0224
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_D
L02CC:	sta     _BoxGuy1+3
;
; if(stick) --stick;
;
L0224:	lda     _stick
	beq     L02C6
	dec     _stick
;
; if(pad1_new & (PAD_A|PAD_B)){
;
L02C6:	lda     _pad1_new
	and     #$C0
	beq     L022D
;
; stick = 10; // only do 10 frames worth
;
	lda     #$0A
	sta     _stick
;
; break_wall();
;
	jmp     _break_wall
;
; } 
;
L022D:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if(temp_y >= 0xf0) return 0;
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L02CE
	txa
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0);
;
L02CE:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp_x = Generic.x;
;
	lda     _Generic
	sta     _temp_x
;
; eject_L = temp_x | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02D1
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L02D1:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02D3
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L02D3:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp_x = Generic.x + Generic.width;
;
	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; eject_R = (temp_x + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02D6
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L02D6:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02D8
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L02D8:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02DA
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L02DA:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02DC
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L02DC:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; eject_D = (temp_y + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02DF
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L02DF:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L02E1
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L02E1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ break_wall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_break_wall: near

.segment	"CODE"

;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_x += 0x16;
;
	lda     #$16
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_y += 5;
;
	lda     #$05
	clc
	adc     _temp_y
	sta     _temp_y
;
; coordinates = (temp_x>>4) + (temp_y & 0xf0);
;
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates] == 1){ // if brick
;
	ldy     _coordinates
	lda     _c_map,y
	cmp     #$01
	bne     L029D
;
; c_map[coordinates] = 0; // can walk through it
;
	ldy     _coordinates
	lda     #$00
	sta     _c_map,y
;
; address = get_ppu_addr(0, temp_x, temp_y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _temp_x
	dey
	sta     (sp),y
	lda     _temp_y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; buffer_1_mt(address, 0); // put metatile #0 here = blank grass
;
	jsr     pushax
	lda     #$00
	jmp     _buffer_1_mt
;
; }
;
L029D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L015F:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1){
;
	jmp     L015F

.endproc

